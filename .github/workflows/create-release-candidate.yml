# Creates a release candidate PR with changelog when commits are pushed to main/master
name: Create Release Candidate 🚀

on:
  push:
    branches:
      - master
      - main

jobs:
  create-release-candidate:
    # Skip if this is a merge of a release candidate PR or any manual release
    if: "!contains(github.event.head_commit.message, 'Release Candidate: v') && !contains(github.event.head_commit.message, 'release:') && !contains(github.event.head_commit.message, 'chore(release)')"
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for accurate changelog

      - name: Determine Semantic Version
        id: semver
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest tag or start from 0.0.0
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Remove 'v' prefix if it exists for version calculation
          VERSION=${LATEST_TAG#v}

          # Set commit range based on whether we have existing tags
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
              COMMIT_RANGE="HEAD"
              LAST_TAG=$(git rev-list --max-parents=0 HEAD)
              echo "No previous tags found, analyzing all commits"
          else
              # Use tag hash directly instead of date for more accurate commit range
              LAST_TAG=$LATEST_TAG
              COMMIT_RANGE="$LATEST_TAG..HEAD"
              echo "Analyzing commits between $LATEST_TAG and HEAD"
          fi

          # Store commit data for reuse in changelog
          mkdir -p .tmp
          git log "$COMMIT_RANGE" --merges --pretty=format:"%H" > .tmp/merge_commits.txt
          git log "$COMMIT_RANGE" --no-merges --pretty=format:"%H %s" > .tmp/direct_commits.txt

          echo "Commits to analyze:"
          cat .tmp/direct_commits.txt

          # Advanced conventional commit parsing
          MAJOR_BUMP=$(git log "$COMMIT_RANGE" --pretty=format:"%s" | grep -E "^(feat|fix|refactor|perf)(\([a-zA-Z0-9-]+\))?!:" || true)
          MINOR_BUMP=$(git log "$COMMIT_RANGE" --pretty=format:"%s" | grep -E "^feat(\([a-zA-Z0-9-]+\))?:" || true)

          # Split version into MAJOR.MINOR.PATCH
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"

          # Convert empty values to 0
          MAJOR=${MAJOR:-0}
          MINOR=${MINOR:-0}
          PATCH=${PATCH:-0}

          # Determine version bump
          if [ -n "$MAJOR_BUMP" ]; then
              echo "Major version bump detected due to breaking changes"
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
          elif [ -n "$MINOR_BUMP" ]; then
              echo "Minor version bump detected due to new features"
              MINOR=$((MINOR + 1))
              PATCH=0
          else
              echo "Patch version bump for fixes and updates"
              PATCH=$((PATCH + 1))
          fi

          # Validate version components are numeric
          if ! [[ "$MAJOR" =~ ^[0-9]+$ ]] || ! [[ "$MINOR" =~ ^[0-9]+$ ]] || ! [[ "$PATCH" =~ ^[0-9]+$ ]]; then
              echo "Error: Invalid version components. Using fallback version bump."
              # Fallback to patch bump
              PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Previous version was $VERSION"
          echo "New version is $NEW_VERSION"

      - name: Generate Comprehensive Changelog
        id: changelog
        run: |
          # Create temp file for new changes
          echo "## v${{ env.VERSION }} ($(date '+%Y-%m-%d'))" > .tmp/new_changes.md
          echo "" >> .tmp/new_changes.md

          echo "### Generating changelog from commits..."

          # Define categories
          declare -A CATEGORIES=(
            ["feat"]="✨ Features"
            ["fix"]="🐛 Bug Fixes"
            ["docs"]="📝 Documentation"
            ["style"]="💄 Styling"
            ["refactor"]="♻️ Refactoring"
            ["perf"]="⚡ Performance"
            ["test"]="🤖 Tests"
            ["chore"]="🔧 Chores"
            ["ci"]="👷 CI/CD"
            ["build"]="📦 Build"
            ["revert"]="🔥 Reverts"
          )

          # Get all commits since last tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          if [ "$LATEST_TAG" = "v0.0.0" ]; then
              COMMIT_RANGE="HEAD"
          else
              COMMIT_RANGE="$LATEST_TAG..HEAD"
          fi

          echo "Commit range: $COMMIT_RANGE"

          # Process commits by category
          for CATEGORY in "${!CATEGORIES[@]}"; do
            echo "Processing $CATEGORY commits..."
            
            # Get both direct commits and merge commits matching this category
            # Direct commits
            DIRECT_COMMITS=$(git log "$COMMIT_RANGE" --no-merges --pretty=format:"%H %s" | grep -E "^[a-f0-9]+ ${CATEGORY}(\([a-zA-Z0-9-]+\))?!?:" || true)
            
            # Process PRs for this category
            PR_COMMITS=""
            while read -r MERGE_HASH; do
              if [ ! -z "$MERGE_HASH" ]; then
                PR_NUMBER=$(git log -1 "$MERGE_HASH" --pretty=format:"%s" | grep -o '#[0-9]\+' | tr -d '#' || true)
                if [ ! -z "$PR_NUMBER" ]; then
                  PR_TITLE=$(gh pr view "$PR_NUMBER" --json title --jq .title 2>/dev/null || echo "")
                  if [[ "$PR_TITLE" =~ ^${CATEGORY}(\([a-zA-Z0-9-]+\))?!?:.+ ]]; then
                    PR_COMMITS="${PR_COMMITS}${MERGE_HASH} ${PR_TITLE} (#${PR_NUMBER})"
                  fi
                fi
              fi
            done < <(git log "$COMMIT_RANGE" --merges --pretty=format:"%H")
            
            # Combine all commits for this category
            ALL_COMMITS="${DIRECT_COMMITS}${PR_COMMITS}"
            
            # If we have any entries for this category, write them to the new changes
            if [ ! -z "$ALL_COMMITS" ]; then
              echo "Found commits for $CATEGORY"
              echo "### ${CATEGORIES[$CATEGORY]}" >> .tmp/new_changes.md
              echo "" >> .tmp/new_changes.md
              
              # Process each commit
              echo "$ALL_COMMITS" | while read -r COMMIT; do
                if [ ! -z "$COMMIT" ]; then
                  HASH=$(echo "$COMMIT" | cut -d' ' -f1)
                  MESSAGE=$(echo "$COMMIT" | cut -d' ' -f2-)
                  
                  # Clean message (remove category prefix)
                  CLEAN_MESSAGE=$(echo "$MESSAGE" | sed -E "s/^${CATEGORY}(\([a-zA-Z0-9-]+\))?!?: //")
                  
                  # Check if this is a breaking change
                  if [[ "$MESSAGE" =~ ^${CATEGORY}(\([a-zA-Z0-9-]+\))?!: ]]; then
                    PREFIX="⛓️‍💥 "
                  else
                    PREFIX=""
                  fi
                  
                  # Check if this has a PR number already
                  if [[ "$CLEAN_MESSAGE" =~ \(#[0-9]+\)$ ]]; then
                    echo "- ${PREFIX}${CLEAN_MESSAGE}" >> .tmp/new_changes.md
                  else
                    # Format the commit message with hash
                    echo "- ${PREFIX}${CLEAN_MESSAGE}" >> .tmp/new_changes.md
                  fi
                fi
              done
              
              echo "" >> .tmp/new_changes.md
            fi
          done

          # Combine new changes with existing changelog if it exists
          if [ -f "CHANGELOG.md" ]; then
            cat .tmp/new_changes.md > CHANGELOG.new
            echo "" >> CHANGELOG.new
            cat CHANGELOG.md >> CHANGELOG.new
            mv CHANGELOG.new CHANGELOG.md
          else
            cat .tmp/new_changes.md > CHANGELOG.md
          fi

          # Output the changelog content
          echo "Generated changelog content:"
          cat .tmp/new_changes.md

          # Save changelog content as output
          echo "content<<EOF" >> $GITHUB_OUTPUT
          cat .tmp/new_changes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Cleanup Temporary Files
        run: rm -rf .tmp/

      - name: Create or Update Release Candidate PR
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: release-candidate
          title: "Release Candidate: v${{ env.VERSION }}"
          body: |
            ${{ steps.changelog.outputs.content }}
          base: ${{ github.event.repository.default_branch }}
          labels: Release Candidate
          delete-branch: false
          commit-message: "chore(release): prepare release candidate v${{ env.VERSION }}"
